import os
import json
import time
from google import genai
from google.genai.errors import APIError

# WARNING: Hardcoding the API key is INSECURE for production code.
# Assuming this key is defined in your actual file:
GEMINI_API_KEY = "YOUR_GEMINI_API_KEY" 

class ChatbotModel:
    def __init__(self, model_name="gemini-2.5-flash"):
        self.model_name = model_name
        self.client = None
        
        print(f"INFO: Attempting to initialize Gemini client with model: {self.model_name}")
        try:
            self.client = genai.Client(api_key=GEMINI_API_KEY)
            print("INFO: Gemini client initialization successful.")
        except Exception as e:
            print(f"CRITICAL ERROR: Failed to initialize Gemini client. Details: {e}")
            self.client = None

    def generate(self, prompt: str) -> str:
        if not self.client:
            return "Error: Gemini client not available due to initialization failure."

        try:
            response = self.client.models.generate_content(
                model=self.model_name,
                contents=prompt,
                config={
                    "temperature": 0.7
                }
            )
            return response.text
        
        except APIError as e:
            return f"API Error: Failed to generate content. Details: {e}"
        except Exception as e:
            return f"Unexpected Error during generation: {e}"

def clean_markdown_output(text: str) -> str:
    """Removes basic Markdown formatting for clean console printing."""
    # Simple replacement to remove bold and list markers
    text = text.replace('**', '')
    text = text.replace('*', ' -')
    # Remove excessive whitespace generated by replacements
    return '\n'.join(line.strip() for line in text.split('\n'))


if __name__ == "__main__":
    
    if GEMINI_API_KEY == "YOUR_GEMINI_API_KEY_HERE":
        print("FAIL: Please replace 'YOUR_GEMINI_API_KEY_HERE' with your actual key in the code.")
    else:
        test_prompt = "What are the three most important nutrients needed in the second trimester of pregnancy?"
        
        print("-" * 60)
        print("STARTING GEMINI CHATBOT TEST")
        print(f"Prompt: {test_prompt}")
        
        try:
            start_time = time.time()
            
            chatbot = ChatbotModel()
            
            response_text = chatbot.generate(test_prompt)
            
            end_time = time.time()
            
            # --- FIX APPLIED HERE: Clean the Markdown response ---
            cleaned_response = clean_markdown_output(response_text)
            # ----------------------------------------------------
            
            print("-" * 60)
            print("SUCCESS: Response Received (Cleaned)")
            print("Response:")
            print(cleaned_response) # Print the cleaned text
            
            print(f"\nTotal execution time: {end_time - start_time:.2f} seconds")
            
        except Exception as e:
            print(f"\nUNHANDLED EXCEPTION: Test failed. Details: {e}")
            
        print("-" * 60)